#!/usr/bin/python3
#
# Copyright (c) 2020 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import re
import getopt
import traceback
import requests
import requests.auth


class ProgramError(Exception):
    pass


def get_screenshot(hostname, timeout, screenshot_file, username, password):
    if username != '':
        auth = requests.auth.HTTPBasicAuth(username, password)
    else:
        auth = None

    try:
        response = requests.get(f'http://{hostname}:80/CGI/Screenshot',
                                timeout = timeout, auth = auth)
        response.raise_for_status()

    except requests.RequestException as error:
        raise ProgramError(error)

    try:
        with open(screenshot_file, 'wb') as file:
            file.write(response.content)

    except (PermissionError, IsADirectoryError) as error:
        raise ProgramError(f'{error.filename}: {error.strerror}')

    print(f'Saved {screenshot_file}')


def main():
    short_options = 'h:t:u:p:H'
    long_options = ['host=', 'timeout=', 'username=', 'password=', 'help']

    try:
        options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
    except getopt.GetoptError as error:
        raise ProgramError(error.msg[0].upper() + error.msg[1:] +
                           '. Try \'' + os.path.basename(sys.argv[0]) + ' --help\' for more information')

    hostname = None
    timeout = 10
    username = ''
    password = ''
    help = False

    for option, argument in options:
        if option in ('-h', '--host'):
            hostname = argument

            if not re.search(r'(?xi) ^ (?: [a-z0-9\-]+ \.)* [a-z0-9\-]+ $', hostname):
                raise ProgramError(f'Invalid host: {hostname}')

        elif option in ('-t', '--timeout'):
            timeout = argument

            try:
                timeout = int(timeout)
            except ValueError:
                raise ProgramError(f'Invalid timeout: {timeout}')

        elif option in ('-u', '--username'):
            username = argument

        elif option in ('-p', '--password'):
            password = argument

        elif option in ('-H', '--help'):
            help = True

    if help:
        print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] SCREEN-SHOT\n'
              'Download a desktop screenshot from a Cisco IP Phone\n'
              '\n'
              '  -h, --host HOST            host name or IP-address of the phone\n'
              '  -t, --timeout TIMEOUT      request timeout in seconds (default 10)\n'
              '  -u, --username USERNAME    authentication username\n'
              '  -p, --password PASSWORD    authentication password\n'
              '  -H, --help                 print this help and exit\n'
              '\n'
              'SCREEN-SHOT is the path where the image will be saved\n')

        return

    if not len(arguments):
        raise ProgramError('No screen-shot output path specified')

    screenshot_file = arguments[0]

    if hostname is None:
        raise ProgramError('No host specified')

    get_screenshot(hostname, timeout, screenshot_file, username, password)


if __name__ == '__main__':
    try:
        main()

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)
