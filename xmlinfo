#!/usr/bin/env python3
#
# Copyright (c) 2020 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import re
import getopt
import traceback

import requests
import requests.auth
import requests.adapters
from lxml import etree


class ProgramError(Exception):
    pass


class HTTPSAdapter(requests.adapters.HTTPAdapter):
    def init_poolmanager(self, *args, **kwargs):
        kwargs['assert_hostname'] = False
        super().init_poolmanager(*args, **kwargs)


def get_info(hostname, port, timeout, info, username, password, certificate_file):
    # Transform: call -> CallInfo, line -> LineInfo, settings -> SettingsInfo, mode -> ModeInfo
    path = info[0].upper() + info[1:] + 'Info'

    if username != '':
        auth = requests.auth.HTTPBasicAuth(username, password)
    else:
        auth = None

    scheme = 'https' if certificate_file else 'http'

    try:
        session = requests.Session()
        session.mount('https://', HTTPSAdapter())

        response = session.get(f'{scheme}://{hostname}:{port}/CGI/{path}',
                               timeout = timeout, auth = auth, verify = certificate_file)

    except requests.RequestException as error:
        raise ProgramError(error)

    if response.headers['Content-Type'][0:8] != 'text/xml':
        raise ProgramError('Unexpected Content-Type ' + response.headers['Content-Type'])

    try:
        document = etree.fromstring(response.content, etree.XMLParser(remove_blank_text = True))
    except etree.XMLSyntaxError as error:
        raise ProgramError(error)

    print(etree.tostring(document, pretty_print = True).decode('utf-8'), end = '')

def main():
    try:
        short_options = 'h:t:u:p:c:H'
        long_options = ['host=', 'timeout=', 'username=', 'password=', 'certificate=', 'help']

        try:
            options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
        except getopt.GetoptError as error:
            raise ProgramError(error.msg[0].upper() + error.msg[1:] +
                               '. Try \'' + os.path.basename(sys.argv[0]) + ' --help\' for more information')

        hostname = None
        port = None
        timeout = 10
        username = ''
        password = ''
        certificate_file = None
        help = False

        for option, argument in options:
            if option in ('-h', '--host'):
                hostname = argument

                if ':' in hostname:
                    hostname, port = hostname.rsplit(':', maxsplit = 1)

                    try:
                        port = int(port)

                        if port < 1 or port > 65535:
                            raise ValueError

                    except ValueError:
                        raise ProgramError(f'Invalid port: {port}')

                if not re.search(r'(?xi) ^ (?: [a-z0-9\-]+ \.)* [a-z0-9\-]+ $', hostname):
                    raise ProgramError(f'Invalid host: {hostname}')

            elif option in ('-t', '--timeout'):
                timeout = argument

                try:
                    timeout = int(timeout)
                except ValueError:
                    raise ProgramError(f'Invalid timeout: {timeout}')

            elif option in ('-u', '--username'):
                username = argument

            elif option in ('-p', '--password'):
                password = argument

            elif option in ('-c', '--certificate'):
                certificate_file = argument

            elif option in ('-H', '--help'):
                help = True

        if help:
            print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] INFO\n'
                  'Get status information as XML from a Cisco IP Phone.\n'
                  '\n'
                  '  -h, --host HOST[:PORT]         host name or IP address and port of the phone\n'
                  '  -t, --timeout TIMEOUT          connection timeout in seconds (default 10)\n'
                  '  -u, --username USERNAME        authentication username\n'
                  '  -p, --password PASSWORD        authentication password\n'
                  '  -c, --certificate CERT-FILE    connect using SSL and verify using certificate\n'
                  '  -H, --help                     print this help and exit\n'
                  '\n'
                  'INFO is one of either line, call, settings or mode.\n')

            return

        if not len(arguments):
            raise ProgramError(f'No mode specified')

        info = arguments[0]

        if info not in ('line', 'call', 'settings', 'mode'):
            raise ProgramError(f'Invalid info: {info}')

        if hostname is None:
            raise ProgramError('No host specified')

        if port is None:
            port = 443 if certificate_file else 80

        get_info(hostname, port, timeout, info, username, password, certificate_file)

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)


if __name__ == '__main__':
    main()
