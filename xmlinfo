#!/usr/bin/python3
#
# Copyright (c) 2020 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import re
import getopt
import traceback
from lxml import etree
import requests
import requests.auth


class ProgramError(Exception):
    pass


def get_info(hostname, timeout, info, username, password):
    # call -> CallInfo, line -> LineInfo, settings -> SettingsInfo, mode -> ModeInfo
    path = info[0].upper() + info[1:] + 'Info'

    if username != '':
        auth = requests.auth.HTTPBasicAuth(username, password)
    else:
        auth = None

    try:
        response = requests.get(f'http://{hostname}:80/CGI/{path}',
                                timeout = timeout, auth = auth)
        response.raise_for_status()

    except requests.RequestException as error:
        raise ProgramError(error)

    if response.headers['Content-Type'][0:8] != 'text/xml':
        raise ProgramError('Unexpected Content-Type ' + response.headers['Content-Type'])

    try:
        document = etree.fromstring(response.content, etree.XMLParser(remove_blank_text = True))
    except etree.XMLSyntaxError as error:
        raise ProgramError(error)

    print(etree.tostring(document, pretty_print = True).decode('utf-8'), end = '')

def main():
    short_options = 'h:t:u:p:H'
    long_options = ['host=', 'timeout=', 'username=', 'password=', 'help']

    try:
        options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
    except getopt.GetoptError as error:
        raise ProgramError(error.msg[0].upper() + error.msg[1:] +
                           '. Try \'' + os.path.basename(sys.argv[0]) + ' --help\' for more information')

    hostname = None
    timeout = 10
    username = ''
    password = ''
    help = False

    for option, argument in options:
        if option in ('-h', '--host'):
            hostname = argument

            if not re.search(r'(?xi) ^ (?: [a-z0-9\-]+ \.)* [a-z0-9\-]+ $', hostname):
                raise ProgramError(f'Invalid host: {hostname}')

        elif option in ('-t', '--timeout'):
            timeout = argument

            try:
                timeout = int(timeout)
            except ValueError:
                raise ProgramError(f'Invalid timeout: {timeout}')

        elif option in ('-u', '--username'):
            username = argument

        elif option in ('-p', '--password'):
            password = argument

        elif option in ('-H', '--help'):
            help = True

    if help:
        print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] INFO\n'
              'Get status information as XML from a Cisco IP Phone\n'
              '\n'
              '  -h, --host HOST            host name or IP-address of the phone\n'
              '  -t, --timeout TIMEOUT      request timeout in seconds (default 10)\n'
              '  -u, --username USERNAME    authentication username\n'
              '  -p, --password PASSWORD    authentication password\n'
              '  -H, --help                 print this help and exit\n'
              '\n'
              'INFO is one of either line, call, settings or mode\n')

        return

    if not len(arguments):
        raise ProgramError(f'No mode specified')

    info = arguments[0]

    if info not in ('line', 'call', 'settings', 'mode'):
        raise ProgramError(f'Invalid info: {info}')

    if hostname is None:
        raise ProgramError('No host specified')

    get_info(hostname, timeout, info, username, password)


if __name__ == '__main__':
    try:
        main()

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)
