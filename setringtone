#!/usr/bin/python3
#
# Copyright (c) 2020 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import re
import getopt
import traceback
from html import escape

import requests
import requests.auth


class ProgramError(Exception):
    pass


def set_ringtone(hostname, timeout, ringtone, username, password):
    content = '<?xml version="1.0" encoding="UTF-8"?>' \
	'<setRingTone>' \
          '<ringTone>' + escape(ringtone) + '</ringTone>' \
        '</setRingTone>'

    if username != '':
        auth = requests.auth.HTTPBasicAuth(username, password)
    else:
        auth = None

    try:
        response = requests.post(f'http://{hostname}:80/CGI/Execute',
                                 timeout = timeout, auth = auth, data = {'XML': content})
        response.raise_for_status()

    except requests.RequestException as error:
        raise ProgramError(error)

    print(f'Set ring-tone to {ringtone}')


def main():
    try:
        short_options = 'h:t:u:p:H'
        long_options = ['host=', 'timeout=', 'username=', 'password=', 'help']

        try:
            options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
        except getopt.GetoptError as error:
            raise ProgramError(error.msg[0].upper() + error.msg[1:] +
                               '. Try \'' + os.path.basename(sys.argv[0]) + ' --help\' for more information')

        hostname = None
        timeout = 10
        username = ''
        password = ''
        help = False

        for option, argument in options:
            if option in ('-h', '--host'):
                hostname = argument

                if not re.search(r'(?xi) ^ (?: [a-z0-9\-]+ \.)* [a-z0-9\-]+ $', hostname):
                    raise ProgramError(f'Invalid host: {hostname}')

            elif option in ('-t', '--timeout'):
                timeout = argument

                try:
                    timeout = int(timeout)
                except ValueError:
                    raise ProgramError(f'Invalid timeout: {timeout}')

            elif option in ('-u', '--username'):
                username = argument

            elif option in ('-p', '--password'):
                password = argument

            elif option in ('-H', '--help'):
                help = True

        if help:
            print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] RING-TONE\n'
                  'Set the ring-tone on a Cisco IP Phone.\n'
                  '\n'
                  '  -h, --host HOST            host name or IP address of the phone\n'
                  '  -t, --timeout TIMEOUT      request timeout in seconds (default 10)\n'
                  '  -u, --username USERNAME    authentication username\n'
                  '  -p, --password PASSWORD    authentication password\n'
                  '  -H, --help                 print this help and exit\n'
                  '\n'
                  'RING-TONE is either an http: or https: URL.\n')

            return

        if not len(arguments):
            raise ProgramError(f'No ring-tone provided')

        ringtone = arguments[0]

        if not re.search(r'(?x) ^ https?:// ', ringtone):
            raise ProgramError(f'Invalid ring-tone: {ringtone}')

        if hostname is None:
            raise ProgramError('No host specified')

        set_ringtone(hostname, timeout, ringtone, username, password)

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)


if __name__ == '__main__':
    main()
